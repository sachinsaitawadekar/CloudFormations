---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Public EC2 Instance.'
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceName:
    Description: Nane of the instance.
    Type: String
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t3a.small
  Subnets:
    Description: The subnets where workers can be created.
    Type: AWS::EC2::Subnet::Id
  VPCName:
    Description: Specify VPC
    Type: AWS::EC2::VPC::Id
  DiskSize:
    Description: Specify Storage Size
    Type: Number
    Default: 10
  SSHLocation0:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  AmiImage:
    Description: Provide AMI Image.
    Type: String
    Default: ami-04bde106886a53080, ami-0747bdcabd34c712a
  S3FullAccess:
    Type: String
    Description: 'ARN of the first IAM Managed Policy to add to the role'
    Default: "arn:aws:iam::aws:policy/AmazonS3FullAccess"
Resources:
  #PublicIP:
  #  Type: AWS::EC2::EIP
  #  Properties:
  #    InstanceId: !Ref EC2Instance
  #    Domain: vpc  
  EC2IAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AdministratorAccess
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [ !Ref EC2IAMRole ]
  InstanceSecurityGroup1:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Ref SSHLocation0
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: !Ref SSHLocation0
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: !Ref SSHLocation0
      VpcId: !Ref VPCName
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType:
        Ref: InstanceType
      KeyName:
        Ref: KeyName
      ImageId: !Ref AmiImage
      DisableApiTermination: false
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            DeleteOnTermination: True
            VolumeSize: !Ref DiskSize
      IamInstanceProfile: !Ref InstanceProfile
      NetworkInterfaces:  
      - DeleteOnTermination: true
        DeviceIndex: 0
        SubnetId: !Ref Subnets
        GroupSet:
        - Ref: InstanceSecurityGroup1
      #UserData:
      #  Fn::Base64:
      #    Fn::Sub:
      #      - |
      #        #!/bin/bash -xe
      #        apt update -y
      #        apt-get install nginx -y
      #        apt-get install docker-compose -y
      #        echo "SecurityGroups group id is ${Availabiilty}"
      #      - Availabiilty: !GetAtt InstanceSecurityGroup1.GroupId
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          
          apt update -y
          
          # sudo apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common -y
          # curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          # sudo apt-key fingerprint 0EBFCD88 
          # sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
          # sudo apt-get update -y 
          # sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose -y
          # # sudo apt-get install jq awscli -y
          # apt-get install jq python3-pip -y
          # pip3 install --upgrade awscli
          # sudo apt -V install gnupg2 pass -y
          # curl "https://s3.amazonaws.com/session-manager-downloads/plugin/latest/ubuntu_64bit/session-manager-plugin.deb" -o "session-manager-plugin.deb"
          # sudo dpkg -i session-manager-plugin.deb
          
          aws configure set default.region ${AWS::Region}

      Tags:
      - Key: Name
        Value: !Ref InstanceName

Outputs:
  InstanceId:
    Description: InstanceId of the newly EC2 instance
    Value:
      Ref: EC2Instance